import fs from 'fs';
import path from 'path';
import { createCanvas } from 'canvas';
import { logger } from '../logger.js';

const { IMAGE_CACHE_PATH = './cache/summary.png' } = process.env;

export async function generateSummaryImage(countries, lastRefreshedAt) {
  try {
    const total = countries.length;
    const top5 = [...countries]
      .filter((c) => typeof c.estimated_gdp === 'number' && c.estimated_gdp > 0)
      .sort((a, b) => b.estimated_gdp - a.estimated_gdp)
      .slice(0, 5);

    const width = 800;
    const height = 600;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');

    ctx.fillRect(0, 0, width, height);

    ctx.fillStyle = '#1e293b';
    ctx.font = 'bold 30px Arial';
    ctx.fillText('🌍 Country Summary', 50, 60);

    ctx.font = '22px Arial';
    ctx.fillStyle = '#0f172a';
    ctx.fillText(`Total Countries: ${total}`, 50, 120);

    ctx.font = 'bold 22px Arial';
    ctx.fillText('Top 5 by Estimated GDP:', 50, 180);

    ctx.font = '20px Arial';
    ctx.fillStyle = '#1e293b';
    top5.forEach((c, i) => {
      const name = c.name.length > 20 ? c.name.slice(0, 20) + '…' : c.name;
      const gdpStr = c.estimated_gdp
        ? c.estimated_gdp.toLocaleString(undefined, { maximumFractionDigits: 2 })
        : 'N/A';
      ctx.fillText(`${i + 1}. ${name} — ${gdpStr}`, 70, 220 + i * 40);
    });

    ctx.font = '18px Arial';
    ctx.fillStyle = '#475569';
    ctx.fillText(`Last Refresh (UTC): ${lastRefreshedAt}`, 50, 460);

    ctx.font = '16px Arial';
    ctx.fillStyle = '#94a3b8';
    ctx.fillText('Generated by rest-countries-sqlite', 50, 520);

    const dir = path.dirname(IMAGE_CACHE_PATH);
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });

    const buffer = canvas.toBuffer('image/png');
    fs.writeFileSync(IMAGE_CACHE_PATH, buffer);

    logger.info({ IMAGE_CACHE_PATH }, 'Summary image generated successfully');
  } catch (err) {
    logger.error({ err }, 'Failed to generate summary image');
  }
}

export function getSummaryImageBuffer() {
  if (!fs.existsSync(IMAGE_CACHE_PATH)) {
    return null;
  }
  return fs.readFileSync(IMAGE_CACHE_PATH);
}
